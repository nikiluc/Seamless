[{"/Users/lucnikiema/Desktop/spotify-cs/src/index.js":"1","/Users/lucnikiema/Desktop/spotify-cs/src/App.js":"2"},{"size":219,"mtime":1608009484326,"results":"3","hashOfConfig":"4"},{"size":14444,"mtime":1614041758027,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"t8pxzc",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/lucnikiema/Desktop/spotify-cs/src/index.js",[],["12","13"],"/Users/lucnikiema/Desktop/spotify-cs/src/App.js",["14"],"import React, { useState, useEffect, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport alanBtn from \"@alan-ai/alan-sdk-web\";\nimport background from \"./images/download.png\";\nimport musicGif from \"./images/jakeMusic.gif\";\nimport \"./App.css\";\nimport $ from \"jquery\";\nimport { Container, ListGroup } from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Image from \"react-bootstrap/Image\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Popover from \"react-bootstrap/Popover\";\nimport Overlay from \"react-bootstrap/Overlay\";\nimport dotenv from \"dotenv\";\nimport axios from \"axios\";\n\ndotenv.config({ path: \".env\" });\n\nconst client_id = process.env.REACT_APP_client_id;\nconst client_secret = process.env.REACT_APP_client_secret;\nlet access_token;\n\nconst alanKey = process.env.REACT_APP_alanKey;\n\nvar alan;\n\nconst App = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [song, setSong] = useState(\"\");\n  const [validated, setValidated] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [posted, setPosted] = useState(false);\n  const [alert, showAlert] = useState(false);\n  const [found, setFound] = useState(false);\n  const ref = useRef(null);\n\n  $(function () {\n\n    isSignedIn();\n\n    window.$(\"#js-rotating\").Morphext({\n      animation: \"animate__animated animate__fadeInUp\",\n      separator: \",\",\n      speed: 2500,\n      complete: function () {},\n    });\n\n    axios(\"https://accounts.spotify.com/api/token\", {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        Authorization:\n          \"Basic \" +\n          Buffer.from(client_id + \":\" + client_secret).toString(\"base64\"),\n      },\n      data: \"grant_type=client_credentials\",\n      method: \"POST\",\n    }).then((tokenResponse) => {\n      access_token = tokenResponse.data.access_token;\n    });\n\n    window.$(\"#autocomplete\").autocomplete({\n      source: function (request, response) {\n        let query = request.term.toLowerCase().split(\" \").join(\"+\");\n\n        axios(\n          `https://api.spotify.com/v1/search?q=${query}&type=track&market=US`,\n          {\n            method: \"GET\",\n            headers: { Authorization: \"Bearer \" + access_token },\n          }\n        )\n          .then((trackResponse) => {\n            //const song_info = trackResponse.data.tracks.items[0]\n            response(\n              $.map(\n                trackResponse.data.tracks.items.slice(0, 5),\n                function (item) {\n                  return {\n                    label: item.name + \" by \" + item.artists[0].name,\n                    value: item.name + \" \" + item.artists[0].name, //change to id\n                    id: item.id,\n                  };\n                }\n              )\n            );\n          })\n          .catch((error) => {\n            console.log(error.response);\n          });\n      },\n      minLength: 1,\n      select: function (event, ui) {\n        window.$(\"#autocomplete\").val(ui.item.value);\n        window.location.href = \"#\" + ui.item.value;\n        setInputText(ui.item.value);\n        setSong(ui.item.id);\n      },\n    });\n  });\n\n  //Sets input Text\n  const inputTextHandler = (e) => {\n    setInputText(e.target.value);\n    setFound(false);\n    //console.log(e.target.value);\n  };\n\n  //Final Typed Query from user\n  const submitHandler = (e) => {\n    if (e.target.checkValidity() === false) {\n    } else {\n\n      let query = inputText.toLowerCase().split(\" \").join(\"+\");\n\n      axios(\n        `https://api.spotify.com/v1/search?q=${query}&type=track&market=US`,\n        {\n          method: \"GET\",\n          headers: { Authorization: \"Bearer \" + access_token },\n        }\n      )\n        .then((trackResponse) => {\n          if (trackResponse.data.tracks.items.length >= 1) {\n            e.preventDefault();\n            loadingAnimation();\n            makePlaylist(song);\n            setLoading(false);\n          } else {\n            e.preventDefault();\n            setFound(true);\n            setValidated(false);\n          }\n        })\n        .catch((error) => {\n          console.log(error.response);\n        });\n    }\n    e.preventDefault();\n    setValidated(true);\n  };\n\n  function loadingAnimation() {\n    $(\".title\").addClass(\"animate__animated animate__fadeOut\");\n    $(\".form-rounded\").addClass(\"animate__animated animate__fadeOutUp\");\n    $(\".submitBtn\").addClass(\"animate__animated animate__fadeOutDown\");\n    setTimeout(function () {\n      setLoading(true);\n    }, 2000);\n    $(\".music\").addClass(\"animate__animated animate__fadeIn\");\n    $(\".spinner\").addClass(\"animate__animated animate__fadeIn\");\n  }\n\n  function loadResults(songArray) {\n    $(\".music\").removeClass(\"animate__animated animate__fadeIn\");\n    $(\".spinner\").removeClass(\"animate__animated animate__fadeIn\");\n    $(\".music\").addClass(\"animate__animated animate__fadeOut\");\n    $(\".spinner\").addClass(\"animate__animated animate__fadeOut\");\n\n    $(\".spotifyButton\")\n      .addClass(\"animate__animated animate__fadeInDown\")\n      .attr(\"hidden\", false);\n\n    var songList = $(\"ul.songList\")\n      .addClass(\"animate__animated animate__fadeIn\")\n      .attr(\"hidden\", false);\n    songArray.forEach((element) => {\n      var li = $('<ListGroupItem as=\"li\" bsClass=\"customList\"/>')\n        .addClass(\"animate__animated animate__fadeInUp\")\n        .appendTo(songList);\n      $(\n        `<a href= ${element[\"externalURL\"]} target=\"_blank\" rel=\"noopener noreferrer\"' +'/>`\n      )\n        .addClass(\"list-group-item\")\n        .text(element[\"title\"] + \" by \" + element[\"artist\"])\n        .appendTo(li);\n    });\n    setLoading(false);\n    $(\".animate__animated animate__fadeInDown\").remove();\n    $(\".searchbar\").remove();\n    $(\".submitBtn\").remove();\n    $(\".title\").removeClass(\"animate__animated animate__fadeOut\");\n    $(\".title\").css(\"margin-top\", \"80px\");\n    $(\".title\").addClass(\"animate__animated animate__fadeInDown\");\n  }\n\n  function loadSignOut() {\n\n    $(\".signOutBtn\")\n    .addClass(\"animate__animated animate__fadeInDown\")\n    .attr(\"hidden\", false);\n\n  }\n\n  function isSignedIn(){\n    fetch(\"/isSignedIn\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"Application/JSON\",\n      },\n      body: JSON.stringify({}),\n    })\n      .then(function (response) {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response.text();\n      })\n      .then(function (response) {\n        console.log(response);\n        if (response === 'true'){\n          loadSignOut();\n        }\n\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n\n  }\n\n  function refreshPage() {\n    window.location.reload();\n  }\n\n  useEffect(() => {\n    alan = alanBtn({\n      key: alanKey,\n      onCommand: ({ command, song_info, search_str, ans }) => {\n        if (command === \"listSearch\") {\n          playSong(song_info);\n        } else if (command === \"makePlaylist\") {\n          loadingAnimation();\n          makePlaylist(search_str);\n        } else if (command === \"postPlaylist\") {\n          postPlaylist(ans);\n        }\n      },\n      rootEl: document.getElementById(\"alan-btn\"),\n    });\n  }, []);\n\n  function playSong(song_info) {\n    window.open(song_info.external_urls.spotify);\n  }\n\n  function makePlaylist(search_str) {\n    fetch(\"/playlist\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"Application/JSON\",\n      },\n      body: JSON.stringify({ search_str }),\n    })\n      .then(function (response) {\n        if (!response.ok) {\n          //throw Error(response.statusText);\n          showAlert(true);\n          setTimeout(function () {\n            refreshPage();\n          }, 4000);\n        }\n        return response.text();\n      })\n      .then(function (response) {\n        if (inputText === \"\") {\n          alan.activate();\n          alan.callProjectApi(\n            \"setClientData1\",\n            { value: response },\n            function (error, result) {\n              if (error) {\n                console.error(error);\n                return;\n              }\n            }\n          );\n        }\n        var songArray = JSON.parse(response);\n        loadResults(songArray);\n      });\n  }\n\n  function postPlaylist(ans) {\n    fetch(\"/postPlaylist\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"Application/JSON\",\n      },\n      body: JSON.stringify({ ans }),\n    })\n      .then(function (response) {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response.text();\n      })\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n    setTimeout(function () {\n      loadSignOut();\n    }, 3000);\n    setPosted(true);\n    alan.playText(\"Done.\");\n  }\n\n  function signOut () {\n    fetch(\"/signOut\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"Application/JSON\",\n      },\n      body: JSON.stringify({}),\n    })\n      .then(function (response) {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response.text();\n      })\n      .then(function (response) {\n        console.log(response);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n\n      refreshPage();\n  }\n\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.9), rgba(0, 0, 0, 0.4)), url(${background})`,\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    >\n      <div className=\"main-div\">\n      <Button\n            className=\"signOutBtn\"\n            size=\"sm\"\n            variant=\"success\"\n            type=\"submit\"\n            hidden={true}\n            onClick={() => {\n              signOut();\n            }}\n          >\n            Sign Out\n          </Button>{\"\"}\n        <div className=\"animate__animated animate__fadeIn\">\n          <h1 className=\"title\" id=\"titleLink\">\n            Seamless\n          </h1>\n        </div>\n        <div className=\"animate__animated animate__fadeInDown\">\n          <div ref={ref}>\n            <Form\n              id=\"searchForm\"\n              ref={ref}\n              noValidate\n              validated={validated}\n              onSubmit={submitHandler}\n            >\n              <Form.Group className=\"searchbar\">\n                <Form.Control\n                  className=\"form-rounded\"\n                  id=\"autocomplete\"\n                  value={inputText}\n                  size=\"lg\"\n                  type=\"text\"\n                  placeholder=\"Enter an artist and song :)\"\n                  onChange={inputTextHandler}\n                  required={true}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  Please enter a song and artist.\n                </Form.Control.Feedback>\n              </Form.Group>\n            </Form>\n          </div>\n        </div>\n        <div className=\"animate__animated animate__fadeInUp\">\n          <Button\n            form=\"searchForm\"\n            className=\"submitBtn\"\n            size=\"lg\"\n            variant=\"success\"\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n          {\"\"}\n          <Overlay show={found} target={ref.current} placement=\"right\">\n            <Popover id=\"popover-basic\">\n              <Popover.Content>\n                <strong>Uh oh</strong> we couldn't find your song. Please try a\n                different song!\n              </Popover.Content>\n            </Popover>\n          </Overlay>\n        </div>\n        <div className=\"addToSpotify\">\n          <Container>\n            <Row className=\"justify-content-center\" md=\"auto\">\n              <Button\n                className=\"spotifyButton\"\n                hidden={true}\n                size=\"lg\"\n                variant=\"success\"\n                type=\"button\"\n                disabled={posted}\n                onClick={() => {\n                  postPlaylist(\"True\");\n                }}\n              >\n                {posted ? \"Done!\" : \"Add to Spotify\"}\n              </Button>\n              {\"\"}\n              <Button\n                className=\"spotifyButton\"\n                hidden={true}\n                size=\"lg\"\n                variant=\"success\"\n                type=\"button\"\n                onClick={refreshPage}\n              >\n                Create Another\n              </Button>\n              {\"\"}\n            </Row>\n          </Container>\n        </div>\n        <div className=\"errorModal\">\n          <Modal size=\"lg\" show={alert}>\n            <Modal.Header closeButton>\n              <Modal.Title>Error</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              Oops! Something went wrong. Refreshing the page in a few\n              seconds...\n            </Modal.Body>\n            <Modal.Footer>\n              <Button\n                variant=\"secondary\"\n                onClick={() => {\n                  showAlert(false);\n                }}\n              >\n                Close\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n        <div>\n          <Image\n            className=\"music\"\n            src={musicGif}\n            roundedCircle={true}\n            hidden={!loading}\n          ></Image>\n        </div>\n        <span hidden={!loading} id=\"js-rotating\">\n          Studying similar artists..., You have an awesome taste in music!,\n          Finding great songs..., Putting you on to new sounds..., Thanks for\n          using Seamless :), Elvis?? That's not right..., Back on\n          track!...sorta?, Brining you quality music...,\n        </span>\n        <div className=\"spinner\" hidden={!loading}>\n          <div className=\"rect1\"></div>\n          <div className=\"rect2\"></div>\n          <div className=\"rect3\"></div>\n          <div className=\"rect4\"></div>\n          <div className=\"rect5\"></div>\n        </div>\n        <div className=\"animate-flicker\" hidden={!loading}></div>\n        <div>\n          <ListGroup as=\"ul\" className=\"songList\" hidden={true}></ListGroup>\n        </div>\n      </div>\n      <footer className=\"footer\">\n        <div className=\"tech\">\n          <p></p>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":243,"column":6,"nodeType":"21","endLine":243,"endColumn":8,"suggestions":"22"},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'makePlaylist' and 'postPlaylist'. Either include them or remove the dependency array.","ArrayExpression",["25"],"no-global-assign","no-unsafe-negation",{"desc":"26","fix":"27"},"Update the dependencies array to be: [makePlaylist, postPlaylist]",{"range":"28","text":"29"},[7236,7238],"[makePlaylist, postPlaylist]"]